<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('MSeason', 'doctrine');

/**
 * BaseMSeason
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $name
 * @property string $url
 * @property string $path
 * @property integer $volume_id
 * @property integer $click_count
 * @property MVolume $MVolume
 * @property Doctrine_Collection $MEpisode
 * 
 * @method integer             getId()          Returns the current record's "id" value
 * @method string              getName()        Returns the current record's "name" value
 * @method string              getUrl()         Returns the current record's "url" value
 * @method string              getPath()        Returns the current record's "path" value
 * @method integer             getVolumeId()    Returns the current record's "volume_id" value
 * @method integer             getClickCount()  Returns the current record's "click_count" value
 * @method MVolume             getMVolume()     Returns the current record's "MVolume" value
 * @method Doctrine_Collection getMEpisode()    Returns the current record's "MEpisode" collection
 * @method MSeason             setId()          Sets the current record's "id" value
 * @method MSeason             setName()        Sets the current record's "name" value
 * @method MSeason             setUrl()         Sets the current record's "url" value
 * @method MSeason             setPath()        Sets the current record's "path" value
 * @method MSeason             setVolumeId()    Sets the current record's "volume_id" value
 * @method MSeason             setClickCount()  Sets the current record's "click_count" value
 * @method MSeason             setMVolume()     Sets the current record's "MVolume" value
 * @method MSeason             setMEpisode()    Sets the current record's "MEpisode" collection
 * 
 * @package    mymanga
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseMSeason extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('m_season');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('name', 'string', 100, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 100,
             ));
        $this->hasColumn('url', 'string', 200, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 200,
             ));
        $this->hasColumn('path', 'string', 100, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 100,
             ));
        $this->hasColumn('volume_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('click_count', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 8,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('MVolume', array(
             'local' => 'volume_id',
             'foreign' => 'id'));

        $this->hasMany('MEpisode', array(
             'local' => 'id',
             'foreign' => 'season_id'));
    }
}